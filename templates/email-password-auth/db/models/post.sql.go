// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package models

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (id, title, content, user_id)
VALUES (?, ?, ?, ?)
RETURNING id, title, content, user_id
`

type CreatePostParams struct {
	ID      string
	Title   string
	Content string
	UserID  string
}

type CreatePostRow struct {
	ID      string
	Title   string
	Content string
	UserID  string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.UserID,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, user_id, created_at, updated_at
FROM post
WHERE id = ?
`

func (q *Queries) GetPostByID(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByUserId = `-- name: GetPostsByUserId :many
SELECT id, title, content, user_id, created_at, updated_at
FROM post
WHERE user_id = ?
ORDER BY created_at
`

func (q *Queries) GetPostsByUserId(ctx context.Context, userID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPost = `-- name: ListPost :many
SELECT id, title, content, user_id, created_at, updated_at
FROM post
ORDER BY name
`

func (q *Queries) ListPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post
SET title = ?, content = ?, user_id = ?
WHERE id = ?
RETURNING id, title, content, user_id
`

type UpdatePostParams struct {
	Title   string
	Content string
	UserID  string
	ID      string
}

type UpdatePostRow struct {
	ID      string
	Title   string
	Content string
	UserID  string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.ID,
	)
	var i UpdatePostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
	)
	return i, err
}
